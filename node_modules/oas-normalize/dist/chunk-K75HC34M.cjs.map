{"version":3,"sources":["/Users/kanadg/Code/readmeio/oas/packages/oas-normalize/dist/chunk-K75HC34M.cjs","../src/lib/utils.ts"],"names":[],"mappings":"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","file":"/Users/kanadg/Code/readmeio/oas/packages/oas-normalize/dist/chunk-K75HC34M.cjs","sourcesContent":[null,"import YAML, { JSON_SCHEMA } from 'js-yaml';\n\n/**\n * Determine if a given variable is a `Buffer`.\n *\n */\nexport function isBuffer(obj: any) {\n  return (\n    obj != null &&\n    obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' &&\n    !!obj.constructor.isBuffer(obj)\n  );\n}\n\n/**\n * Converts GitHub blob URLs to raw URLs\n */\nexport function normalizeURL(url: string) {\n  if (url.startsWith('https://github.com/') && url.includes('/blob/')) {\n    return url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/');\n  }\n  return url;\n}\n\n/**\n * Determine the type of a given variable. Returns `false` if unrecognized.\n *\n */\nexport function getType(obj: any) {\n  if (isBuffer(obj)) {\n    return 'buffer';\n  } else if (typeof obj === 'object') {\n    return 'json';\n  } else if (typeof obj === 'string') {\n    if (obj.match(/\\s*{/)) {\n      return 'string-json';\n    } else if (obj.match(/\\n/)) {\n      // Not sure about this...\n      return 'string-yaml';\n    } else if (obj.substring(0, 4) === 'http') {\n      return 'url';\n    }\n\n    return 'path';\n  }\n\n  return false;\n}\n\n/**\n * Determine if a given schema if an OpenAPI definition.\n *\n */\nexport function isOpenAPI(schema: Record<string, unknown>) {\n  return !!schema.openapi;\n}\n\n/**\n * Determine if a given schema is a Postman collection.\n *\n * Unfortunately the Postman schema spec doesn't have anything like `openapi` or `swagger` for us\n * to look at but it does require that `info` and `item` be present and as `item` doesn't exist in\n * OpenAPI or Swagger we can use the combination of those two properties to determine if what we\n * have is a Postman collection.\n *\n * @see {@link https://schema.postman.com/json/collection/v2.0.0/collection.json}\n * @see {@link https://schema.postman.com/json/collection/v2.1.0/collection.json}\n */\nexport function isPostman(schema: Record<string, unknown>): boolean {\n  return !!schema.info && !!schema.item;\n}\n\n/**\n * Determine if a given schema if an Swagger definition.\n *\n */\nexport function isSwagger(schema: Record<string, unknown>) {\n  return !!schema.swagger;\n}\n\n/**\n * Convert a YAML blob or stringified JSON object into a JSON object.\n *\n */\nexport function stringToJSON(string: Record<string, unknown> | string): Record<string, unknown> {\n  if (typeof string === 'object') {\n    return string;\n  } else if (string.match(/^\\s*{/)) {\n    // eslint-disable-next-line try-catch-failsafe/json-parse\n    return JSON.parse(string);\n  }\n\n  return YAML.load(string, { schema: JSON_SCHEMA }) as Record<string, unknown>;\n}\n\n/**\n * Determine if a given schema is an API definition that we can support.\n *\n */\nexport function isAPIDefinition(schema: Record<string, unknown>) {\n  return isOpenAPI(schema) || isPostman(schema) || isSwagger(schema);\n}\n\n/**\n * Retrieve the type of API definition that a given schema is.\n *\n */\nexport function getAPIDefinitionType(schema: Record<string, unknown>) {\n  if (isOpenAPI(schema)) {\n    return 'openapi';\n  } else if (isPostman(schema)) {\n    return 'postman';\n  } else if (isSwagger(schema)) {\n    return 'swagger';\n  }\n\n  return 'unknown';\n}\n"]}